START:
    MOV32RI EAX :LOGIN_MESSAGE
    PUSH32R EAX
    CALL32I :PRINT

    $ xFF xFF

STRLEN:                 ; strlen(eax) -> stack
    POP32R ECX
    MOV32RR EDX EAX

    STRLEN_LOOP:
        LOAD8RR EBX EAX
        ADD32RI EAX 1
        CMP8RI EBX 0
        JNZ32I :STRLEN_LOOP

    STRLEN_DONE:
        SUB32RR EAX EDX
        ADD32RI EAX x01
        PUSH32R EAX
        PUSH32R ECX
        RET

PRINT:                  ; (char* buffer)
    POP32R R11          ; Old EIP   
    POP32R R10          ; Load buffer param to R10
    PUSH32R R10     ; Set EAX to buffer
    CALL32I :STRLEN
    POP32R EDX          ; Load strlen result to EDX
    MOV32RI EAX x01     ; Set EAX to 1 (write syscall)
    MOV32RI EBX x01     ; Set EBX to 1 (stdout)
    MOV32RR ECX R10     ; Set ECX to buffer
    SYSCALL             ; Call write syscall

    ; "Return"
    PUSH32R R11         ; Save EIP
    RET


LOGIN_MESSAGE:
$ "This is a string message! " x0A x00
BUFFER:
$ x0000